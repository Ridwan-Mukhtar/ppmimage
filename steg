#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#define PPMPixel struct PPMPixel
#define PPM struct PPM
#define NODE struct NODE
#define MAX 255


PPMPixel {int r,g,b;};
PPM {char code[2]; NODE * comments; int width, height, max; PPMPixel ** matrix;};
NODE{char * value; NODE * next;};

int ppmType(FILE * fd, char * code) {
	fscanf(fd,"%s",code);
  	if (code[0] == 'P' && code[1] == '3' && code[2] == '\0') {
  		//'\0' signifies the end of the string	
  		return 1; //the format of the image is P3
  	}

  	return 0; //the format of the image isn't P3
}

int getValue(FILE * fd) {
  	int constant;
  	fscanf(fd, "%d", &constant);
  	return constant;
}

int valueChecker(int value, int max) {
	if (value > max) {
		printf("The RGB value %d is too large! It has been changed to: %d\n", value, max);
		value = max;
		return value;
	} else if (value < 0) {
		printf("The RGB %d is too small! It has been changed to 0\n", value);
		value = 0;
		return value;
	} else {
		return value;
	}
}

void skipSpace(FILE * fd) {
	char space;
	while(1) {
		space = fgetc(fd);
		if(!isspace(space)) {
			break; 
		}
	}
	ungetc(space, fd);
}

void swap(int * x, int * y) {
	//simple swap function
    int value = *x;
    *x = *y;
    *y = value;
}

void bubbleSort(int  * height, int * width, int textLength) {
	for (int i = 0; i < textLength-1; i++) {
		for (int j = 0; j < textLength-i-1; j++) {
			if (height[j] > height[j+1]) {
				swap(&width[j], &width[j+1]);
				swap(&height[j], &height[j+1]);
			} else if(height[j] == height[j+1]) {
				//checks if the width is bigger so we can order two heights if they are the same value
				if (width[j] > width[j+1]) {
					swap(&width[j], &width[j+1]);
					swap(&height[j], &height[j+1]);
				}
			}
		}
	}
}

PPM * getPPM(FILE * fd) {
	//we have to use malloc because the pointer is originally not pointing to anything
	PPM *image = (PPM *) malloc(sizeof(PPM));
	if(ppmType(fd, image->code)) { //if this returns 1 (true) then we know we are dealing with a P3 file
		image->comments = (NODE *) malloc(sizeof(NODE));
		NODE * tempNode = image->comments;

		char * holder = (char *) malloc(sizeof(char)*300);

		skipSpace(fd);
		fgets(holder, 200, fd); 

		int i = 0;

		while (holder[0] == '#') {
			tempNode->value = (char *) malloc(sizeof(char)*300);
			strcpy(tempNode->value, holder);

			tempNode->next = (NODE *) malloc(sizeof(NODE));
			tempNode = tempNode->next;
			tempNode->next = NULL;

			fgets(holder,200,fd);
		}

		image->width = atoi(strtok(holder, " "));
    	image->height = atoi(strtok(NULL, " "));
    	image->max = getValue(fd);

    	i = 0; 
    	image->matrix = (PPMPixel **) malloc(sizeof(PPMPixel) * (image->height-1));

    	for (i = 0; i <= image->height; i++) {
    		image->matrix[i] = (PPMPixel *) malloc(sizeof(PPMPixel)*(image->width-1));
    	}

    	i = 0;
    	int j = 0;
    	int checker = 0;
    	while(i < image->height) {
    		while (j < image->width) {
      			image->matrix[i][j].r = valueChecker(getValue(fd), image->max);
      			image->matrix[i][j].g = valueChecker(getValue(fd), image->max);
      			image->matrix[i][j].b = valueChecker(getValue(fd), image->max);
      			j++;
      		}
      		j=0;
      		i++;	
		}
	} else {
		printf("This program only deals with P3 files!\n");
		exit(0);
	}

	return image;
}

void showPPM(PPM * i) {
	printf("%s\n", i->code);
	int counter = 0;

	NODE * tempNode = i->comments;
	while (tempNode != NULL) {
		printf("%s", tempNode->value);
		tempNode = tempNode->next;
	}

	printf("%d %d\n", i->width,i->height);
	printf("%d\n",i->max);
	
	int counterHeight = 0;
	int counterWidth = 0;

	while (counterHeight<i->height) {
		while (counterWidth<i->width) { 
			printf("%d %d %d\n", i->matrix[counterHeight][counterWidth].r, i->matrix[counterHeight][counterWidth].g, i->matrix[counterHeight][counterWidth].b);
			counterWidth++;
		}
		counterWidth = 0;
		counterHeight++;
	}
}

void getFile(PPM * i) {
	FILE * p3File = fopen("encoded.ppm", "w+");
	fprintf(p3File, "%s\n", i->code);
		
	NODE * tempNode = i->comments;
	while (tempNode != NULL) {
		fprintf("%s\n", tempNode->value);
		tempNode = tempNode->next;
	}

	fprintf(p3File, "%d %d\n", i->width,i->height);
	fprintf(p3File, "%d\n",i->max);

		int counterHeight = 0;
	int counterWidth = 0;

	while (counterHeight<i->height) {
		while (counterWidth<i->width) { 
			fprintf(p3File, "%d %d %d\n", i->matrix[counterHeight][counterWidth].r, i->matrix[counterHeight][counterWidth].g, i->matrix[counterHeight][counterWidth].b);
			counterWidth++;
		}
		counterWidth = 0;
		counterHeight++;
	}
}

PPM * encode(char * text, PPM * i) {
	int textLength = strlen(text);
	if(textLength > (i->width*i->height)) {
		printf("The image can't hold this text! The text is too large!\n");
		return NULL;
	}


	int sortHeight[textLength];
	int sortWidth[textLength];
	int counter = 0;
	for(int counter = 0; counter < textLength; counter++) {
			int width = (rand() % i->width);
			int height = (rand() % i->height);

			sortHeight[counter] = height;
			sortWidth[counter] = width;
	}

	bubbleSort(sortHeight, sortWidth, textLength);

	for (counter = 0; counter < textLength; counter++) {
		if (i->matrix[sortHeight[counter]][sortWidth[counter]].r == (int) text[counter]) {
			while (	i->matrix[sortHeight[counter]][sortWidth[counter]].r == (int) text[counter]) {		
				int width = (rand() % i->width);
				int height = (rand() % i->height);

				sortHeight[counter] = height;
				sortWidth[counter] = width;
			}		
			i->matrix[sortHeight[counter]][sortWidth[counter]].r = (int) text[counter];			
		} else { 
			i->matrix[sortHeight[counter]][sortWidth[counter]].r = (int) text[counter];
		}
	}

	getFile(i);
	return i;
}



char * decode(PPM * i1, PPM * i2) {
	int sizeOfi1 = i1->width * i1->height;
	int sizeOfi2 = i2->width * i2->height;
	char * arr = (char *) malloc(sizeof(255));
	
	if (sizeOfi1 == sizeOfi2) {
		int i = 0;
		int j = 0;
		int counter = 0;
		while (i<i2->height) {
			while(j<i2->width) {
				if (i1->matrix[i][j].r != i2->matrix[i][j].r) {
					arr[counter] = (char) i2->matrix[i][j].r;
					counter++;
				}
				j++;
			}
			i++;
			j=0;
		}
		arr[counter] = '\0';
		return arr;
	} else {
		printf("the two PPM files are not the same!");
		exit(0);
	}
}

int main(int argc, char * argv[]) {
	srand(time(NULL));
	if (argc == 4 && (strcmp(argv[1], "e")) == 0) {
		FILE * fd = fopen(argv[2], "r+");
		PPM * i = getPPM(fd);
		encode(argv[3], i);
		fclose(fd);
	}

	if (argc == 4 && (strcmp(argv[1], "d")) == 0) {
		FILE * fd = fopen(argv[2], "r+");
		FILE * fd1 = fopen(argv[3], "r+");

		PPM * old = getPPM(fd);
		PPM * new = getPPM(fd1);
		char * decodedValue = decode(old, new);
		printf("The decoded message is: %s\n", decodedValue);
		printf("\n");
		fclose(fd);
		fclose(fd1);
	}
}

